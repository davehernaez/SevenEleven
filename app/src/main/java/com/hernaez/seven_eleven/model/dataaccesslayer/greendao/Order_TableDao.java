package com.hernaez.seven_eleven.model.dataaccesslayer.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.hernaez.seven_eleven.model.dataaccesslayer.greendao.Order_Table;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ORDER__TABLE".
*/
public class Order_TableDao extends AbstractDao<Order_Table, Long> {

    public static final String TABLENAME = "ORDER__TABLE";

    /**
     * Properties of entity Order_Table.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ProductName = new Property(1, String.class, "productName", false, "PRODUCT_NAME");
        public final static Property ProductQty = new Property(2, Integer.class, "productQty", false, "PRODUCT_QTY");
        public final static Property ProductPrice = new Property(3, Integer.class, "productPrice", false, "PRODUCT_PRICE");
        public final static Property ProductSubtotal = new Property(4, Integer.class, "productSubtotal", false, "PRODUCT_SUBTOTAL");
        public final static Property ProductImgPath = new Property(5, String.class, "productImgPath", false, "PRODUCT_IMG_PATH");
    };


    public Order_TableDao(DaoConfig config) {
        super(config);
    }
    
    public Order_TableDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ORDER__TABLE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"PRODUCT_NAME\" TEXT," + // 1: productName
                "\"PRODUCT_QTY\" INTEGER," + // 2: productQty
                "\"PRODUCT_PRICE\" INTEGER," + // 3: productPrice
                "\"PRODUCT_SUBTOTAL\" INTEGER," + // 4: productSubtotal
                "\"PRODUCT_IMG_PATH\" TEXT);"); // 5: productImgPath
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ORDER__TABLE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Order_Table entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String productName = entity.getProductName();
        if (productName != null) {
            stmt.bindString(2, productName);
        }
 
        Integer productQty = entity.getProductQty();
        if (productQty != null) {
            stmt.bindLong(3, productQty);
        }
 
        Integer productPrice = entity.getProductPrice();
        if (productPrice != null) {
            stmt.bindLong(4, productPrice);
        }
 
        Integer productSubtotal = entity.getProductSubtotal();
        if (productSubtotal != null) {
            stmt.bindLong(5, productSubtotal);
        }
 
        String productImgPath = entity.getProductImgPath();
        if (productImgPath != null) {
            stmt.bindString(6, productImgPath);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Order_Table readEntity(Cursor cursor, int offset) {
        Order_Table entity = new Order_Table( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // productName
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // productQty
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // productPrice
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // productSubtotal
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // productImgPath
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Order_Table entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setProductName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setProductQty(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setProductPrice(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setProductSubtotal(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setProductImgPath(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Order_Table entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Order_Table entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
